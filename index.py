b'#btree with object key and object val, maybe change to more specific stuff later\n#from https://btrees.readthedocs.io/en/latest/index.html\nimport BTrees.OOBTree\naaa\n        for i in range(table.num_columns):\n            self.create_index(i)\n        #if value got updated need to reindex\n        self.updated = [0] * table.num_columns\n        pass\n\n    """\n    # returns the location of all records with the given value on column "column"\n    """\n\n    def locate(self, column, value):\n        self.update_index(column)\n        return self.indices[column].get(value)\n\n    """\n    # Returns the RIDs of all records with values in column "column" between "begin" and "end"\n    """\n\n    def locate_range(self, begin, end, column):\n        self.update_index(column)\n        ridlists = self.indices[column].values(min = begin, max = end)\n        rv = []\n        for ridlist in ridlists:\n            rv.extend(ridlist)\n        return rv\n    """\n    # optional: Create index on specific column\n    """\n\n    def create_index(self, column_number):\n        self.drop_index(column_number)\n        self.indices[column_number] = MyBTree()\n        #figure out after we get organization done\n        for rid in self.table.baserids:\n            val = self.table.read_record(rid, 0)[column_number+7]\n            self.addToIndex(column_number, val, rid)\n\n    def addToIndex(self, column_number, val, rid):\n        #don\'t do anything if index doesn\'t exist\n        if(self.indices[column_number] == None):\n            return False\n        if self.indices[column_number].get(val) == None:\n            self.indices[column_number][val] = {rid}\n        else:\n            self.indices[column_number][val].add(rid)\n        return True\n    """\n    # optional: Drop index of specific column\n    """\n\n    def drop_index(self, column_number):\n        self.indices[column_number] = None\n        self.updated[column_number] = 0\n    \n    def update_index(self, column_number):\n        if self.indices[column_number] is None or self.updated[column_number] == 1:\n            self.drop_index(column_number)\n            self.create_index(column_number)\n            self.updated[column_number] = 0\n'