b'from lstore.table import Table\nfrom lstore.bufferpool import Bufferpool\nimport os\nimport pickle\n\nclass Database():\n\n    def __init__(self):\n        self.tables = []\n        self.bufferpool = Bufferpool()\n        self.path = None\n\n    def open(self, path):\n        if not os.path.exists(path):\n            self.path = path\n            os.mkdir(path)\n\n        else:\n            self.path = path\n            path = os.path.join(path, "metadata_file.pkl")\n            file_open = open(path, \'rb\')\n            self.tables = pickle.load(file_open)\n            file_open.close()\n            \n\n    def close(self):\n        self.bufferpool.dump_pool()\n        path = os.path.join(self.path, "metadata_file.pkl")\n        m_file_open = open(path, \'wb\')\n        pickle.dump(self.tables, m_file_open)\n        m_file_open.close()\n\n    """\n    # Creates a new table\n    :param name: string         #Table name\n    :param num_columns: int     #Number of Columns: all columns are integer\n    :param key: int             #Index of table key in columns\n    """\n    def create_table(self, name, num_columns, key_index):\n        table_path = os.path.join(self.path, name)\n        if os.path.exists(table_path):\n            raise Exception("Table already exists")\n        table = Table(name, num_columns, key_index, self.path)\n        self.tables.append(table)\n        return table\n    \n    """\n    # Deletes the specified table\n    """\n    def drop_table(self, name):\n        for table in self.tables:\n            if name == table.name:\n                self.tables.remove(table)\n                return True\n        \n        return False\n    \n    """\n    # Returns table with the passed name\n    """\n    def get_table(self, name):\n        for table in self.tables:\n            if name == table.name:\n                return table\n        \n        return False\n'